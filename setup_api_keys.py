#!/usr/bin/env python3
"""
API Key Setup Script for Enhanced Document Retriever

This script helps you set up API keys for the enhanced document retriever system.
It provides a secure way to configure your API keys without exposing them in code.

Usage:
    python setup_api_keys.py
"""

import os
import sys
from pathlib import Path
from typing import Dict, Optional


def get_api_key(service_name: str, current_value: Optional[str] = None) -> Optional[str]:
    """Get API key from user input."""
    
    if current_value and current_value != f"your_{service_name.lower()}_api_key_here":
        use_existing = input(f"Found existing {service_name} API key. Keep it? (y/n): ").lower()
        if use_existing in ['y', 'yes']:
            return current_value
    
    print(f"\n{service_name} API Key:")
    print(f"  Purpose: Used for {get_service_description(service_name)}")
    print(f"  Get it from: {get_service_url(service_name)}")
    
    api_key = input(f"Enter your {service_name} API key (or press Enter to skip): ").strip()
    
    if not api_key:
        return None
    
    # Basic validation
    if validate_api_key(service_name, api_key):
        return api_key
    else:
        print(f"‚ùå Invalid {service_name} API key format. Please check and try again.")
        return None


def get_service_description(service_name: str) -> str:
    """Get service description."""
    descriptions = {
        "Anthropic": "document analysis, summarization, and advanced text processing",
        "OpenAI": "embeddings, text processing, and GPT-based document understanding",
        "Google": "Gemini AI for advanced document comprehension and analysis",
        "Perplexity": "research-enhanced document retrieval and context generation",
        "Mistral": "efficient text processing and document analysis",
        "XAI": "Grok AI for document understanding and analysis"
    }
    return descriptions.get(service_name, "AI-powered document processing")


def get_service_url(service_name: str) -> str:
    """Get service URL for API key."""
    urls = {
        "Anthropic": "https://console.anthropic.com/",
        "OpenAI": "https://platform.openai.com/api-keys",
        "Google": "https://makersuite.google.com/app/apikey",
        "Perplexity": "https://www.perplexity.ai/settings/api",
        "Mistral": "https://console.mistral.ai/",
        "XAI": "https://console.x.ai/"
    }
    return urls.get(service_name, "Check the service provider's website")


def validate_api_key(service_name: str, api_key: str) -> bool:
    """Basic API key validation."""
    
    validations = {
        "Anthropic": lambda key: key.startswith("sk-ant-"),
        "OpenAI": lambda key: key.startswith("sk-") and len(key) > 20,
        "Google": lambda key: len(key) > 20,  # Basic length check
        "Perplexity": lambda key: key.startswith("pplx-"),
        "Mistral": lambda key: len(key) > 20,  # Basic length check
        "XAI": lambda key: len(key) > 20  # Basic length check
    }
    
    validator = validations.get(service_name)
    if validator:
        return validator(api_key)
    
    return len(api_key) > 10  # Basic fallback validation


def read_current_env() -> Dict[str, str]:
    """Read current environment variables from .env file."""
    env_vars = {}
    env_file = Path(".env")
    
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
    
    return env_vars


def write_env_file(env_vars: Dict[str, str]):
    """Write environment variables to .env file."""
    
    env_template = """# Enhanced Document Retriever API Configuration
# Generated by setup_api_keys.py

# Core AI API Keys
ANTHROPIC_API_KEY={anthropic_key}
OPENAI_API_KEY={openai_key}
GOOGLE_API_KEY={google_key}

# Optional AI Provider Keys
PERPLEXITY_API_KEY={perplexity_key}
MISTRAL_API_KEY={mistral_key}
XAI_API_KEY={xai_key}
AZURE_OPENAI_API_KEY={azure_key}
OLLAMA_API_KEY={ollama_key}

# Enhanced Document Retriever Settings
PDF_DIRECTORY=./documents/pdfs
API_BASE_URL=http://localhost:8000
API_KEY=mock_api_key

# Vector Database Configuration
VECTOR_DB_DIR=./chroma_db
EMBEDDING_MODEL=all-MiniLM-L6-v2
COLLECTION_NAME=documents

# Cache Configuration
CACHE_DIR=./cache
CACHE_ENABLED=true
CACHE_MAX_SIZE_MB=1000
DOCUMENT_CACHE_TTL=3600
SEARCH_CACHE_TTL=1800

# Logging Configuration
LOG_LEVEL=INFO
LOG_FILE=logs/document_retriever.log
DEBUG_MODE=false

# Performance Settings
CONCURRENT_PDF_PROCESSING=3
CONCURRENT_API_REQUESTS=5
BATCH_SIZE=10
CONNECTION_POOL_SIZE=10

# Search Settings
CHUNK_SIZE=500
CHUNK_OVERLAP=50
MAX_SEARCH_RESULTS=20
SIMILARITY_THRESHOLD=0.3

# GitHub Integration (for Task Master)
GITHUB_API_KEY={github_key}

# Database URLs (if using external databases)
DATABASE_URL=sqlite:///./documents.db
REDIS_URL=redis://localhost:6379

# Security Settings
SECRET_KEY={secret_key}
ALLOWED_HOSTS=localhost,127.0.0.1
CORS_ORIGINS=http://localhost:3000,http://localhost:8000
"""
    
    # Fill in the template
    content = env_template.format(
        anthropic_key=env_vars.get('ANTHROPIC_API_KEY', 'your_anthropic_api_key_here'),
        openai_key=env_vars.get('OPENAI_API_KEY', 'your_openai_api_key_here'),
        google_key=env_vars.get('GOOGLE_API_KEY', 'your_google_api_key_here'),
        perplexity_key=env_vars.get('PERPLEXITY_API_KEY', 'your_perplexity_api_key_here'),
        mistral_key=env_vars.get('MISTRAL_API_KEY', 'your_mistral_api_key_here'),
        xai_key=env_vars.get('XAI_API_KEY', 'your_xai_api_key_here'),
        azure_key=env_vars.get('AZURE_OPENAI_API_KEY', 'your_azure_openai_api_key_here'),
        ollama_key=env_vars.get('OLLAMA_API_KEY', 'your_ollama_api_key_here'),
        github_key=env_vars.get('GITHUB_API_KEY', 'your_github_api_key_here'),
        secret_key=env_vars.get('SECRET_KEY', 'your_secret_key_here')
    )
    
    with open('.env', 'w') as f:
        f.write(content)


def main():
    """Main setup function."""
    
    print("üîß Enhanced Document Retriever API Key Setup")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not Path("src/select").exists():
        print("‚ùå Error: Please run this script from the project root directory")
        print("   (The directory containing the 'src' folder)")
        sys.exit(1)
    
    # Read current environment
    current_env = read_current_env()
    
    # Core API keys
    core_services = ["Anthropic", "OpenAI", "Google"]
    optional_services = ["Perplexity", "Mistral", "XAI"]
    
    print("\nüìã Core API Keys (recommended):")
    print("These provide the best functionality for document processing.")
    
    updated_env = current_env.copy()
    
    for service in core_services:
        env_key = f"{service.upper()}_API_KEY"
        if service == "Google":
            env_key = "GOOGLE_API_KEY"
        
        current_value = current_env.get(env_key)
        api_key = get_api_key(service, current_value)
        
        if api_key:
            updated_env[env_key] = api_key
            print(f"‚úÖ {service} API key configured")
        else:
            print(f"‚è≠Ô∏è  {service} API key skipped")
    
    print("\nüìã Optional API Keys:")
    print("These provide additional functionality but are not required.")
    
    setup_optional = input("\nWould you like to set up optional API keys? (y/n): ").lower()
    
    if setup_optional in ['y', 'yes']:
        for service in optional_services:
            env_key = f"{service.upper()}_API_KEY"
            current_value = current_env.get(env_key)
            api_key = get_api_key(service, current_value)
            
            if api_key:
                updated_env[env_key] = api_key
                print(f"‚úÖ {service} API key configured")
    
    # Generate secret key if needed
    if not updated_env.get('SECRET_KEY') or updated_env.get('SECRET_KEY') == 'your_secret_key_here':
        import secrets
        updated_env['SECRET_KEY'] = secrets.token_urlsafe(32)
        print("‚úÖ Generated new secret key")
    
    # Write the updated .env file
    write_env_file(updated_env)
    
    print("\nüéâ Setup Complete!")
    print("=" * 50)
    print("‚úÖ .env file has been created/updated with your API keys")
    print("‚úÖ Your API keys are now secure and ready to use")
    print("‚úÖ The .env file is already in .gitignore to prevent accidental commits")
    
    print("\nüöÄ Next Steps:")
    print("1. Run the setup script: python setup_enhanced_select.py --full-setup")
    print("2. Test the system: python -m pytest src/select/test_enhanced_retriever.py")
    print("3. Start using the enhanced document retriever!")
    
    print("\nüìù Note:")
    print("- Keep your API keys secure and never commit them to version control")
    print("- You can re-run this script anytime to update your API keys")
    print("- For production use, consider using environment variables or a secret management service")


if __name__ == "__main__":
    main()